// Задача №1: проверить XML на Well formed, 

// <req>

//         <surname>Иванов</surname>

//         <name>Иван</name>

//         <patronymic>Иванович</patronymic>

//         <birthdate>01.01.1990</birthdate>

//         <birthplace>Москва</birthplace>

//         <phone>8 926 766 48 48</phone>

Тут все верно, разве что можно расширить элемент  <birthdate>





<req>

        <surname>Иванов</surname>

        <name>Иван</name>

        <patronymic>Иванович</patronymic>

        <birthdate>
            <day>01</day>
            <month>01</month>
            <year>1990</year>
        </birthdate>

        <birthplace>Москва</birthplace>

        <phone>8 926 766 48 48</phone>

</req>



// **Задача №2:** проверить JSON на Well formed:

// ```json
// {

//         ""surname"": ""Иванов""

//         ""name"": ""Иван""

//         ""patronymic"": ""Иванович""

//         ""birthdate"": ""01.01.1990""

//         ""birthplace"": ""Москва""

//         ""phone"": ""8 926 766 48 48""

// }
// </aside>

Здесь сразу видим проблему повторных кавычек, которые дают невалидные строки, и отсутствие запятых. 
Так же стоит отметить момент, что имена keys тоже принято писать в кавычках, так как могут возникнуть ошибки интерпретации, если имена будут совпадать со служебными функциями и операторами, например, JavaScript.




{
        "surname": "Иванов",

        "name": "Иван",

        "patronymic": "Иванович",

        "birthdate": "01.01.1990",

        "birthplace": "Москва",

        "phone": "8 926 766 48 48"

}

И расширенный вариант birthdate. Cтоит отметить, что 01 - невалидное число, и такие значения нужно отправлять в строковом формате.
{
        "surname": "Иванов",

        "name": "Иван",

        "patronymic": "Иванович",

        "birthdate": { "day": "01" ,"month":"01","year":1990},

        "birthplace": "Москва",

        "phone": "8 926 766 48 48"

}
